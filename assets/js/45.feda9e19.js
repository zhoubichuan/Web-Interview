(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{213:function(a,t,s){"use strict";s.r(t);var e=s(0),r=Object(e.a)({},(function(){var a=this.$createElement;this._self._c;return this._m(0)}),[function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"八、海风教育"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#八、海风教育"}},[a._v("#")]),a._v(" 八、海风教育")]),a._v(" "),s("h2",{attrs:{id:"_1-对-react-看法，它的优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-对-react-看法，它的优缺点"}},[a._v("#")]),a._v(" 1.对 react 看法，它的优缺点")]),a._v(" "),s("p",[a._v("reactjs 是一套 javascript web 库，由 facebook 打造而成且主要用于构建高性能及响应式用户界面。react 负责解决其他 javascript 框架所面对的一大常见难题，即对大规模数据集的处理。能够使用虚拟 dom 并在发生变更时利用补丁安装机制只对 dom 中的 dirty 部分进行重新渲染，react 得以实现远超其他框架的速度表现。")]),a._v(" "),s("ul",[s("li",[a._v("优点：\n"),s("ul",[s("li",[a._v("1.react 速度很快:\n它不直接对 dom 进行操作，引入了一个叫做'虚拟 dom'的概念，安插在 javascript 逻辑和实际 dom 之间，性能好")]),a._v(" "),s("li",[a._v("2.跨浏览器兼容：\n虚拟 dom 帮助我们解决了跨浏览问题，它为我们提供了标准化的 api,甚至在 ie8 中都没问题")]),a._v(" "),s("li",[a._v("3.一切都是 component：\n代码更加'模块化'，重用代码更容易，可维护性高。")]),a._v(" "),s("li",[a._v("4.单项数据流：\n'flux'是一个用于在 javascript 应用中创建的单向数据层的架构，它随着 react 视图库的开发而被 facebook 概念化。\n使用过程中遇到的问题，如何解决的")]),a._v(" "),s("li",[a._v("5.同构、纯粹的 javascript：因为搜索引擎的爬虫程序依赖的是服务端响应而不是 javascript 的执行，预渲染你的应用'有助于搜索引擎优化'")]),a._v(" "),s("li",[a._v("6.兼容性好：\n比如使用 require.js 来加载和打包，而 browserify 和 webpack 适用构建大型应用。它们使得那些艰难的任务不再让人望而生畏。")])])]),a._v(" "),s("li",[a._v("缺点：\n"),s("ul",[s("li",[a._v("1.不适合单独做一个完整的框架")])])])]),a._v(" "),s("h1",{attrs:{id:"_2-react-的理念是什么（拿函数式编程来做页面渲染）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-react-的理念是什么（拿函数式编程来做页面渲染）"}},[a._v("#")]),a._v(" 2.react 的理念是什么（拿函数式编程来做页面渲染）")]),a._v(" "),s("p",[a._v("react 不像 jquery，jquery 是我们想修改某一功能时，首先要获取该功能的 dom 元素，再去做相关功能的修改。而 react 是我想要那些效果，我就直接去做效果的修改。即用户所看到的 ui 界面是由 data 数据做为参数调用 render 函数（纯函数）作用的结果")]),a._v(" "),s("h1",{attrs:{id:"_3-js-是什么范式语言-面向对象还是函数式编程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-js-是什么范式语言-面向对象还是函数式编程"}},[a._v("#")]),a._v(" 3.JS 是什么范式语言(面向对象还是函数式编程)")]),a._v(" "),s("h1",{attrs:{id:"_4-koa-原理，为什么要用-koa-express-和-koa-对比"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-koa-原理，为什么要用-koa-express-和-koa-对比"}},[a._v("#")]),a._v(" 4.koa 原理，为什么要用 koa(express 和 koa 对比)")]),a._v(" "),s("h1",{attrs:{id:"_5-使用的-koa-中间件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-使用的-koa-中间件"}},[a._v("#")]),a._v(" 5.使用的 koa 中间件")]),a._v(" "),s("h1",{attrs:{id:"_6-es6-使用的语法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-es6-使用的语法"}},[a._v("#")]),a._v(" 6.ES6 使用的语法")]),a._v(" "),s("ul",[s("li",[a._v("const：定义过的变量不能被修改，如果是对象的话，对象里面的值可以修改，不进行预解释。")]),a._v(" "),s("li",[a._v("let：不进行预解释，不能重复定义，块级作用域，if 里面定义的变量外面拿不到")]),a._v(" "),s("li",[a._v("扩展运算符：")]),a._v(" "),s("li",[a._v("箭头函数：没有 this，函数里面的 this 指向外面，不能用作构造函数")]),a._v(" "),s("li",[a._v("promise：解决回调地狱")]),a._v(" "),s("li",[a._v("genertor")]),a._v(" "),s("li",[a._v("解构:")])]),a._v(" "),s("h1",{attrs:{id:"_7-promise-和-async-await-和-callback-的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-promise-和-async-await-和-callback-的区别"}},[a._v("#")]),a._v(" 7.Promise 和 async/await 和 callback 的区别")]),a._v(" "),s("h2",{attrs:{id:"_8-promise-有没有解决异步的问题（promise-链是真正强大的地方）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-promise-有没有解决异步的问题（promise-链是真正强大的地方）"}},[a._v("#")]),a._v(" 8.Promise 有没有解决异步的问题（promise 链是真正强大的地方）")]),a._v(" "),s("h2",{attrs:{id:"_9-promise-和-settimeout-的区别（event-loop）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-promise-和-settimeout-的区别（event-loop）"}},[a._v("#")]),a._v(" 9.Promise 和 setTimeout 的区别（Event Loop）")]),a._v(" "),s("h2",{attrs:{id:"_10-进程和线程的区别（一个-node-实例就是一个进程，node-是单线程，通过事件循环来实现异步）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-进程和线程的区别（一个-node-实例就是一个进程，node-是单线程，通过事件循环来实现异步）"}},[a._v("#")]),a._v(" 10.进程和线程的区别（一个 node 实例就是一个进程，node 是单线程，通过事件循环来实现异步）")]),a._v(" "),s("h2",{attrs:{id:"_11-介绍下-dfs-深度优先"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_11-介绍下-dfs-深度优先"}},[a._v("#")]),a._v(" 11.介绍下 DFS 深度优先")]),a._v(" "),s("h2",{attrs:{id:"_12-介绍下观察者模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_12-介绍下观察者模式"}},[a._v("#")]),a._v(" 12.介绍下观察者模式")]),a._v(" "),s("h2",{attrs:{id:"_13-观察者模式里面使用的数据结构-不具备顺序-，是一个-list"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_13-观察者模式里面使用的数据结构-不具备顺序-，是一个-list"}},[a._v("#")]),a._v(" 13.观察者模式里面使用的数据结构(不具备顺序 ，是一个 list)")])])}],!1,null,null,null);t.default=r.exports}}]);