(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{188:function(t,s,a){"use strict";a.r(s);var n=a(0),v=Object(n.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"js-基础知识点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-基础知识点"}},[t._v("#")]),t._v(" JS 基础知识点")]),t._v(" "),a("h2",{attrs:{id:"_1-原始类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-原始类型"}},[t._v("#")]),t._v(" 1.原始类型")]),t._v(" "),a("blockquote",[a("p",[t._v("原始类型有那几种？null 是对象吗？")])]),t._v(" "),a("p",[t._v("在 JS 中存在 6 中原始值，分别是：undefined、null、string、number、boolean、symobol")]),t._v(" "),a("p",[t._v("首先原始类型存储的都是值，是没有函数可以调用的，比如"),a("code",[t._v("undefined.toString()")])]),t._v(" "),a("p",[t._v("此时你肯定会疑问，这不对呀，明明"),a("code",[t._v("'1'.toString()")]),t._v("是可以使用的。其实在这种情况下，'1'已经不是原始类型了，而是被强制转换成了 String 类型也就是对象类型，所以可以调用 toString 函数。")]),t._v(" "),a("p",[t._v("除了会在必要的情况下强转类型以外，原始类型还有一些坑。")]),t._v(" "),a("p",[t._v("其中 JS 的"),a("code",[t._v("number")]),t._v("类型是浮点类型的，在使用中会遇到某些 Bug，比如"),a("code",[t._v("0.1+0.2 !==0.3")]),t._v("，但是这一块的内容会在进阶部分讲到。"),a("code",[t._v("string")]),t._v("类型是不可变的，无论你在"),a("code",[t._v("string")]),t._v("类型上调用何种方法，都不会对值有改变。")]),t._v(" "),a("p",[t._v("另外对于"),a("code",[t._v("null")]),t._v("来说，很多人会认为他是个对象类型，其实这是错误的。虽然"),a("code",[t._v("typeof null")]),t._v("会输出"),a("code",[t._v("object")]),t._v(",但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，"),a("code",[t._v("000")]),t._v("开头代表是对象，然而"),a("code",[t._v("null")]),t._v("表示为全零，所以讲它错误的判断为"),a("code",[t._v("object")]),t._v("。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。")]),t._v(" "),a("h2",{attrs:{id:"_2-对象类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象类型"}},[t._v("#")]),t._v(" 2.对象类型")]),t._v(" "),a("blockquote",[a("p",[t._v("对象类型和原始类型的不同之处？函数参数是对对象会发生什么问题？")])]),t._v(" "),a("p",[t._v("在 JS 中，除了原生类型那么其他的都是对象类型了。对象类型和原始类型不同的是，原始类型存储的是值，对象类型存储的是地址（指针）。当你创建一个对象类型的时候，计算机会在内存中帮我们开辟一个空间来存放至，但是我们需要找到这个空间，这个空间会拥有一个地址（指针）。")]),t._v(" "),a("h2",{attrs:{id:"_3-typeof-vs-instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-typeof-vs-instanceof"}},[t._v("#")]),t._v(" 3.typeof vs instanceof")]),t._v(" "),a("blockquote",[a("p",[t._v("typeof 是否能正确判断类型？instanceof 能正确判断对象的原理是什么？")])]),t._v(" "),a("p",[a("code",[t._v("typeof")]),t._v(" 对于原始类型来说，除了"),a("code",[t._v("null")]),t._v("都可以显示正确的类型")]),t._v(" "),a("p",[a("code",[t._v("typeof")]),t._v("对于对象来说，除了函数都会显示"),a("code",[t._v("object")]),t._v(",所以说"),a("code",[t._v("typeof")]),t._v("并不能准确判断变量到底是什么类型")]),t._v(" "),a("p",[t._v("如果我们想判断一个对象的正确类型，这时候可以考虑使用"),a("code",[t._v("instanceof")]),t._v(",因为内部机制是通过原型链来判断的，在后面的章节中我们也会自己去实现一个"),a("code",[t._v("instanceof")])]),t._v(" "),a("p",[t._v("对于原始类型来说，你想直接通过"),a("code",[t._v("instanceof")]),t._v("来判断类型是不行的，当然我们还是有办法让"),a("code",[t._v("instanceof")]),t._v("判断原始类型的")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("class PrimitiveString {\n  static [Symbol.hasInstance](x) {\n    return typeof x === 'string'\n  }\n}\nconsole.log('hello world' instanceof PrimitiveString) // true\n")])])]),a("p",[t._v("你可能不知道"),a("code",[t._v("Symbol.hasInstance")]),t._v("是什么东西，其实就是一个能让我们自定义"),a("code",[t._v("instanceof")]),t._v("行为的东西，以上代码等同于"),a("code",[t._v("typeof 'hello world' === 'string'")]),t._v(",所以结果自然是"),a("code",[t._v("true")]),t._v("了。这其实也侧面反映了一个问题，"),a("code",[t._v("instanceof")]),t._v("也不是百分百可信的。")]),t._v(" "),a("h2",{attrs:{id:"_4-类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-类型转换"}},[t._v("#")]),t._v(" 4.类型转换")]),t._v(" "),a("p",[t._v("首先我们要知道，在 JS 中类型转换只有三种情况，分别是：")]),t._v(" "),a("ul",[a("li",[t._v("转换为布尔值")]),t._v(" "),a("li",[t._v("转换为数字")]),t._v(" "),a("li",[t._v("转换为字符串")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("原始值")]),t._v(" "),a("th",[t._v("转换目标")]),t._v(" "),a("th",[t._v("结果")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("number")]),t._v(" "),a("td",[t._v("布尔值")]),t._v(" "),a("td",[t._v("除了 0、-0、NaN 都为 true")])]),t._v(" "),a("tr",[a("td",[t._v("string")]),t._v(" "),a("td",[t._v("布尔值")]),t._v(" "),a("td",[t._v("除了空字符串都为 true")])]),t._v(" "),a("tr",[a("td",[t._v("undefined、null")]),t._v(" "),a("td",[t._v("布尔值")]),t._v(" "),a("td",[t._v("false")])]),t._v(" "),a("tr",[a("td",[t._v("引用类型")]),t._v(" "),a("td",[t._v("布尔值")]),t._v(" "),a("td",[t._v("true")])]),t._v(" "),a("tr",[a("td",[t._v("number")]),t._v(" "),a("td",[t._v("字符串")]),t._v(" "),a("td",[t._v("5=>'5'")])]),t._v(" "),a("tr",[a("td",[t._v("Boolean、函数、Symbol")]),t._v(" "),a("td",[t._v("字符串")]),t._v(" "),a("td",[t._v("'true'")])]),t._v(" "),a("tr",[a("td",[t._v("数组")]),t._v(" "),a("td",[t._v("字符串")]),t._v(" "),a("td",[t._v("[1,2]=>'1,2'")])]),t._v(" "),a("tr",[a("td",[t._v("对象")]),t._v(" "),a("td",[t._v("字符串")]),t._v(" "),a("td",[t._v("'[object Object]'")])]),t._v(" "),a("tr",[a("td",[t._v("string")]),t._v(" "),a("td",[t._v("数字")]),t._v(" "),a("td",[t._v("'1'=>1,'a'=>NaN")])]),t._v(" "),a("tr",[a("td",[t._v("数组")]),t._v(" "),a("td",[t._v("数字")]),t._v(" "),a("td",[t._v("空数组为 0，存在一个元素且为数字转数字，其他情况 NaN")])]),t._v(" "),a("tr",[a("td",[t._v("null")]),t._v(" "),a("td",[t._v("数字")]),t._v(" "),a("td",[t._v("0")])]),t._v(" "),a("tr",[a("td",[t._v("除了数组的引用类型")]),t._v(" "),a("td",[t._v("数字")]),t._v(" "),a("td",[t._v("NaN")])]),t._v(" "),a("tr",[a("td",[t._v("Symobl")]),t._v(" "),a("td",[t._v("数字")]),t._v(" "),a("td",[t._v("抛错")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("对象转原始类型")])]),t._v(" "),a("p",[t._v("对象在转换类型的时候，会调用内置的"),a("code",[t._v("[[ToPrimitive]]")]),t._v("函数，对于函数来说，算法逻辑一般来说如下：")]),t._v(" "),a("ul",[a("li",[t._v("如果已经是原始类型了，那就不需要转换了")]),t._v(" "),a("li",[t._v("调用"),a("code",[t._v("x.valueOf()")]),t._v(",如果转换为基础类型，就返回转换的值")]),t._v(" "),a("li",[t._v("调用"),a("code",[t._v("x.toString()")]),t._v("，如果转换为基础类型，就返回转换的值")]),t._v(" "),a("li",[t._v("如果都没有返回原始类型，就会报错")])]),t._v(" "),a("p",[t._v("当然你也可以重写"),a("code",[t._v("Symbol.toPrimitive")]),t._v("，该方法在转原始类型时调用优先级最高。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toPrimitive"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// =>3")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("四则运算")])]),t._v(" "),a("p",[t._v("加法运算符不同于其他几个运算符，它有以下几个特点：")]),t._v(" "),a("ul",[a("li",[t._v("运算中其中一方为字符串，那么就会把另一方也转换为字符串")]),t._v(" "),a("li",[t._v("如果一方不是字符串或者数字，那么会将它转换为数字或者字符串")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'11'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//'41,2,3'")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("比较运算符")])]),t._v(" "),a("p",[t._v("1.如果是对象，就通过"),a("code",[t._v("toPrimitive")]),t._v("转换对象 2.如果是字符串，就通过"),a("code",[t._v("unicode")]),t._v("字符索引来比较")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),a("p",[t._v("在以上代码中，因为 A 是对象，所以通过"),a("code",[t._v("valueOf")]),t._v("转换为原始类型再比较值。")]),t._v(" "),a("h2",{attrs:{id:"_5-this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-this"}},[t._v("#")]),t._v(" 5.this")]),t._v(" "),a("blockquote",[a("p",[t._v("如何正确判断 this?箭头函数的 this 是什么?")])]),t._v(" "),a("h2",{attrs:{id:"_6-vs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-vs"}},[t._v("#")]),t._v(" 6.== vs ===")]),t._v(" "),a("blockquote",[a("p",[t._v("== 和 === 有什么区别？")])]),t._v(" "),a("p",[t._v("对于"),a("code",[t._v("==")]),t._v("来说，如果对比双方的类型"),a("strong",[t._v("不一样")]),t._v("的话，就会进行"),a("strong",[t._v("类型转换")])]),t._v(" "),a("p",[t._v("假如我们需要对比"),a("code",[t._v("x")]),t._v("和"),a("code",[t._v("y")]),t._v("是否相同，就会进行如下判断流程：")]),t._v(" "),a("p",[t._v("1.首先会判断两者类型是否相同，相同的话就是比大小了")]),t._v(" "),a("p",[t._v("2.类型不相同的话，那么就会进行类型转换")]),t._v(" "),a("p",[t._v("3.首先会判断是否在比对"),a("code",[t._v("null")]),t._v("和"),a("code",[t._v("undefined")]),t._v(",是的话就会返回"),a("code",[t._v("true")])]),t._v(" "),a("p",[t._v("4.判断两者类型是否为"),a("code",[t._v("string")]),t._v("和"),a("code",[t._v("number")]),t._v(",是的话就会将字符串转换为"),a("code",[t._v("number")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1 == 1")]),t._v("\n")])])]),a("p",[t._v("5.判断其中一方是否为"),a("code",[t._v("boolean")]),t._v(",是的话就会把"),a("code",[t._v("boolean")]),t._v("转为"),a("code",[t._v("number")]),t._v("再进行判断")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '1' == 1 --\x3e 1==1")]),t._v("\n")])])]),a("p",[t._v("6.判断其中一方是否为"),a("code",[t._v("object")]),t._v("且另一方为"),a("code",[t._v("string")]),t._v("、"),a("code",[t._v("number")]),t._v("或者"),a("code",[t._v("symbol")]),t._v("，是的话就会把"),a("code",[t._v("object")]),t._v("转为原始类型再进行判断")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yck"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// '1' == '[object Object]'")]),t._v("\n")])])]),a("h2",{attrs:{id:"_7-闭包"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-闭包"}},[t._v("#")]),t._v(" 7.闭包")]),t._v(" "),a("blockquote",[a("p",[t._v("什么是闭包")])]),t._v(" "),a("p",[t._v("闭包的定义其实很简单：函数 A 内部有一个函数 B，函数 B 可以访问到函数 A 中的变量，那么函数 B 就是闭包。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n  window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("B")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("很多人对于闭包的解释可能就是嵌套了函数，然后返回一个函数。其实这个解释是不完整的，就比如我上面这个例子就可以反驳这个观点。")]),t._v(" "),a("h2",{attrs:{id:"_8-深浅拷贝"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-深浅拷贝"}},[t._v("#")]),t._v(" 8.深浅拷贝")]),t._v(" "),a("blockquote",[a("p",[t._v("什么是浅拷贝？如何实现浅拷贝？什么是深拷贝？如何实现深拷贝？")])]),t._v(" "),a("p",[t._v("一般我们用 Object.assign 和扩展运算符实现浅拷贝")]),t._v(" "),a("p",[t._v("通常可以用 JSON.parse(JSON.stringify(Obj))实现深拷贝")]),t._v(" "),a("p",[t._v("但是该方法有局限性：")]),t._v(" "),a("ul",[a("li",[t._v("忽略函数")]),t._v(" "),a("li",[t._v("忽略 undefined")]),t._v(" "),a("li",[t._v("忽略 symbol")]),t._v(" "),a("li",[t._v("不能序列化函数")]),t._v(" "),a("li",[t._v("不能解决循环引用的对象")])]),t._v(" "),a("p",[t._v("也可以使用 MessageChannel 实现深拷贝")]),t._v(" "),a("p",[t._v("该方法有局限性：")]),t._v(" "),a("ul",[a("li",[t._v("不能拷贝函数")])]),t._v(" "),a("h2",{attrs:{id:"_9-原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-原型"}},[t._v("#")]),t._v(" 9.原型")]),t._v(" "),a("blockquote",[a("p",[t._v("如何理解原型？如何理解原型链？")])])])}],!1,null,null,null);s.default=v.exports}}]);