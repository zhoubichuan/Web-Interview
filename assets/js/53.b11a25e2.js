(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{221:function(v,_,e){"use strict";e.r(_);var t=e(0),a=Object(t.a)({},(function(){var v=this.$createElement;this._self._c;return this._m(0)}),[function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"浏览器缓存机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存机制"}},[v._v("#")]),v._v(" 浏览器缓存机制")]),v._v(" "),e("h2",{attrs:{id:"_1-缓存位置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-缓存位置"}},[v._v("#")]),v._v(" 1.缓存位置")]),v._v(" "),e("p",[v._v("从缓存位置上来说分为四种，并且各自有"),e("code",[v._v("优先级")]),v._v("，当依次查找缓存且都没有命中的时候，才会去请求网络")]),v._v(" "),e("ul",[e("li",[v._v("1.Service Worker")]),v._v(" "),e("li",[v._v("2.Memory Cache")]),v._v(" "),e("li",[v._v("3.Disk Cache")]),v._v(" "),e("li",[v._v("4.Push Cache")]),v._v(" "),e("li",[v._v("5.网络请求")])]),v._v(" "),e("h3",{attrs:{id:"service-worker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service-worker"}},[v._v("#")]),v._v(" Service Worker")]),v._v(" "),e("p",[v._v("Service Worker 的缓存与浏览器其他内建的缓存机制不同，它可以让我们"),e("strong",[v._v("自由控制")]),v._v("缓存哪些文件、如何匹配缓存、如何读取缓存，并且"),e("strong",[v._v("缓存是持续性的")])]),v._v(" "),e("p",[v._v("当 Service Worker 没有命中缓存的时候，我们需要去调用"),e("code",[v._v("fetch")]),v._v("函数获取数据。也就是说，如果我们没有在 Service Worker 命中缓存的话，会根据缓存查找优先级去查找数据。"),e("strong",[v._v("当时我们是从 Memory Cache 中还是从网络请求中获取的数据，浏览器都会显示我们是从 Service Worker 中获取的内容。")])]),v._v(" "),e("h3",{attrs:{id:"memory-cache"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#memory-cache"}},[v._v("#")]),v._v(" Memory Cache")]),v._v(" "),e("p",[v._v("Memory Cache 也就是内存中的缓存，读取内存中的数据肯定比磁盘快。**但是内存缓存虽然读取高效，可是缓存持续性很短，会随着进程的释放而释放。**一旦我们关闭 Tab 页面，内存中的缓存也就释放了。")]),v._v(" "),e("p",[v._v("当我们访问过页面以后，再次刷新页面，可以发现很多数据都来自于内存缓存。")]),v._v(" "),e("p",[v._v("既然内存缓存这么高效，我们是不是能让数据都存放在内存中呢？")]),v._v(" "),e("p",[v._v("先说结论，这是不可能的。首先计算机中的内存一定比硬盘容量小得多，操作系统门需要精打细算内存的使用，所以能让我们的内存必然不多。内存中其实可以存储大部分的文件，比如说 JS、HTML、CSS、图片等等。但是浏览器会把哪些文件丢进内存这个过程就很玄学了，我查阅了很多资料都没有一个定论。")]),v._v(" "),e("p",[v._v("当然，我通过一些实践和猜测也得出了一些结论：")]),v._v(" "),e("ul",[e("li",[v._v("对于大文件来说，大概率是不存储在内存中的，反义优先")]),v._v(" "),e("li",[v._v("当前系统内存使用率高的话，文件优先存储进硬盘")])]),v._v(" "),e("p",[e("strong",[v._v("Disk Cache")])]),v._v(" "),e("p",[v._v("Disk Cache 也就是存储在硬盘中的缓存，读取速度慢点，但是什么都能存储到磁盘中，比之 Memory Cache 胜在容量和存储时效性上")]),v._v(" "),e("p",[v._v("在所有浏览器缓存中，Disk Cache 覆盖面基本是最大的。它会根据 HTTP Header 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。"),e("strong",[v._v("并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据。")])]),v._v(" "),e("p",[e("strong",[v._v("Push Cache")])]),v._v(" "),e("p",[v._v("Push Cache 是 HTTP/2 中的内容，当以上三种缓存都没有命中时，它才会被使用。"),e("strong",[v._v("并且缓存时间也很短暂，只在会话(session)中存在，一旦会话结束就会被释放。")])]),v._v(" "),e("p",[v._v("Push Cache 在国内能够查到的资料很少，也是因为 HTTP/2 在国内不够普及，但是 HTTP/2 将会是日后一个趋势。")]),v._v(" "),e("ul",[e("li",[v._v("所有的资源都能被推送，但是 Edge 和 Safari 浏览器兼容性不怎么好")]),v._v(" "),e("li",[v._v("可以推送"),e("code",[v._v("no-cache")]),v._v("和"),e("code",[v._v("no-story")]),v._v("的资源")]),v._v(" "),e("li",[v._v("一旦连接被关闭，Push Cache 就被释放")]),v._v(" "),e("li",[v._v("多个页面可以使用相同的 HTTP/2 连接，也就是说能使用同样的缓存")]),v._v(" "),e("li",[v._v("Push Cache 中的缓存只能被使用一次")]),v._v(" "),e("li",[v._v("浏览器可以拒绝已经存在的资源推送")]),v._v(" "),e("li",[v._v("你可以给其他域名推送资源")])]),v._v(" "),e("h2",{attrs:{id:"_2-缓存策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-缓存策略"}},[v._v("#")]),v._v(" 2.缓存策略")]),v._v(" "),e("p",[v._v("通常浏览器缓存策略分为两种："),e("strong",[v._v("强缓存")]),v._v("和"),e("strong",[v._v("协商缓存")]),v._v("，并且缓存策略都是通过设置 HTTP Header 来实现的")]),v._v(" "),e("p",[e("strong",[v._v("强缓存")])]),v._v(" "),e("p",[v._v("强缓存可以通过设置两种 HTTP Header 实现："),e("code",[v._v("Expires")]),v._v("和"),e("code",[v._v("Cache-Control")]),v._v("。强缓存表示在缓存期间不需要请求，"),e("code",[v._v("state code")]),v._v("为 200")]),v._v(" "),e("p",[e("strong",[v._v("Expires")])]),v._v(" "),e("p",[e("code",[v._v("Expires")]),v._v("是 HTTP/1 的产物，表示资源会在"),e("code",[v._v("Web，22 Oct 2018 08:41:00 GMT")]),v._v("后过期，需要再次请求。并且"),e("code",[v._v("Expires")]),v._v("受限于本地时间，如果修改了本地时间，可能会造成缓存失效。")]),v._v(" "),e("p",[e("strong",[v._v("Cache-control")]),v._v(" "),e("code",[v._v("Cache-Control")]),v._v("出现于 HTTP/1.1,优先级高于"),e("code",[v._v("Expires")]),v._v("。该属性值表示资源会在 30 秒后过期，需要再次请求。")]),v._v(" "),e("p",[e("code",[v._v("Cache-Control")]),v._v("可以在请求头或者响应头中设置，并且可以组合使用多种指令。")]),v._v(" "),e("table",[e("thead",[e("tr",[e("th",[v._v("指令")]),v._v(" "),e("th",[v._v("作用")])])]),v._v(" "),e("tbody",[e("tr",[e("td",[v._v("public")]),v._v(" "),e("td",[v._v("表示响应可以被客户端和代理服务器缓存")])]),v._v(" "),e("tr",[e("td",[v._v("private")]),v._v(" "),e("td",[v._v("表示响应只可以被客户端缓存")])]),v._v(" "),e("tr",[e("td",[v._v("max-age=30")]),v._v(" "),e("td",[v._v("缓存 30 秒后就过期，需要重新请求")])]),v._v(" "),e("tr",[e("td",[v._v("s-maxage=30")]),v._v(" "),e("td",[v._v("覆盖 max-age,作用一样，只在代理服务器中生效")])]),v._v(" "),e("tr",[e("td",[v._v("no-store")]),v._v(" "),e("td",[v._v("不缓存任何响应")])]),v._v(" "),e("tr",[e("td",[v._v("no-cache")]),v._v(" "),e("td",[v._v("资源被缓存，但是立即失效，下次会发起请求验证资源是否过期")])]),v._v(" "),e("tr",[e("td",[v._v("max-state=30")]),v._v(" "),e("td",[v._v("30 秒内，即使缓存过期，也使用缓存")])]),v._v(" "),e("tr",[e("td",[v._v("min-fresh=30")]),v._v(" "),e("td",[v._v("希望在 30 秒内获取最新的响应")])])])]),v._v(" "),e("h3",{attrs:{id:"协商缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#协商缓存"}},[v._v("#")]),v._v(" 协商缓存")]),v._v(" "),e("p",[v._v("如果缓存过期了，就需要发起请求验证资源是否有更新。协商缓存可以通过设置两种 HTTP Header 实现："),e("code",[v._v("Last-Modified")]),v._v("和"),e("code",[v._v("Etag")]),v._v("。")]),v._v(" "),e("p",[v._v("当浏览器发起请求验证资源时，如果资源没有改变，那么服务端就会返回 304 状态码，并且更新浏览器缓存有效期。")]),v._v(" "),e("h3",{attrs:{id:"last-modified-和-if-modified-since"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#last-modified-和-if-modified-since"}},[v._v("#")]),v._v(" Last-Modified 和 If-Modified-Since")]),v._v(" "),e("p",[e("code",[v._v("Last-Modified")]),v._v("表示本地文件最后修改日期，"),e("code",[v._v("If-Modified-Since")]),v._v("会将"),e("code",[v._v("Last-Modified")]),v._v("的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话会将新的资源发送回来，否则返回 304 状态码。")]),v._v(" "),e("p",[v._v("但是"),e("code",[v._v("Last-Modified")]),v._v("存在一些弊端")]),v._v(" "),e("ul",[e("li",[v._v("如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成"),e("code",[v._v("Last-Modified")]),v._v("被修改，服务端不能命中缓存导致发送相同的资源")]),v._v(" "),e("li",[v._v("因为"),e("code",[v._v("Last-Modified")]),v._v("只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确的资源。")])]),v._v(" "),e("h3",{attrs:{id:"etag-和-if-none-match"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#etag-和-if-none-match"}},[v._v("#")]),v._v(" ETag 和 If-None-Match")]),v._v(" "),e("p",[e("code",[v._v("ETag")]),v._v("类似于文件指纹，"),e("code",[v._v("If-None-Match")]),v._v("会将当前"),e("code",[v._v("ETag")]),v._v("发送给服务器，询问该资源"),e("code",[v._v("ETag")]),v._v("是否变动，有变动的话就将新的资源发送回来。并且"),e("code",[v._v("ETag")]),v._v("优先级比"),e("code",[v._v("Last-Modified")]),v._v("高")]),v._v(" "),e("p",[v._v("以上就是缓存策略的所有内容了，看到这里，不知道你是否会有这样一个疑问。如果什么缓存策略都没设置，那么浏览器会怎么处理？")]),v._v(" "),e("p",[v._v("对于这种情况，浏览器会采用一个启发式的算法，通常会取响应头中的"),e("code",[v._v("Date")]),v._v("减去"),e("code",[v._v("Last-Modified")]),v._v("值的 10%作为缓存时间。")]),v._v(" "),e("h2",{attrs:{id:"_3-实际场景应用缓存策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-实际场景应用缓存策略"}},[v._v("#")]),v._v(" 3.实际场景应用缓存策略")]),v._v(" "),e("h3",{attrs:{id:"频繁变动的资源"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#频繁变动的资源"}},[v._v("#")]),v._v(" 频繁变动的资源")]),v._v(" "),e("p",[v._v("对于频繁变动的资源，首先需要使用"),e("code",[v._v("Cache-Control:no-cache")]),v._v("使浏览器每次都请求服务器，然后配合"),e("code",[v._v("ETag")]),v._v("或者"),e("code",[v._v("Last-Modified")]),v._v("来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。")]),v._v(" "),e("h3",{attrs:{id:"代码文件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#代码文件"}},[v._v("#")]),v._v(" 代码文件")]),v._v(" "),e("p",[v._v("这里特这除了 HTML 外的代码文件，因为 HTML 文件一般不换存或者缓存时间很短。")]),v._v(" "),e("p",[v._v("一般来说，现在都会使用工具来打包代码，那么我们就可以对文件名进行哈希处理，只有当代码修改后才会生成新的文件名。基于此，我们就可以给代码文件设置缓存有效期一年"),e("code",[v._v("Control:max-age=31536000")]),v._v(",这样只有当 HTML 文件中引入的文件名发生了改变才会去下载最新的代码，否则就一直使用缓存。")])])}],!1,null,null,null);_.default=a.exports}}]);