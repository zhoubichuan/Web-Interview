(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{190:function(e,_,v){"use strict";v.r(_);var t=v(0),a=Object(t.a)({},(function(){var e=this.$createElement;this._self._c;return this._m(0)}),[function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("div",{staticClass:"content"},[v("h1",{attrs:{id:"js-异步编程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#js-异步编程"}},[e._v("#")]),e._v(" JS 异步编程")]),e._v(" "),v("h2",{attrs:{id:"_1-并发和并行区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-并发和并行区别"}},[e._v("#")]),e._v(" 1.并发和并行区别")]),e._v(" "),v("blockquote",[v("p",[e._v("并发与并行的区别")])]),e._v(" "),v("p",[e._v("并发是宏观概念，我分别有任务 A 和任务 B，在一段时间内通过任务间的切换完成了这两个任务，这种情况就可以称为并发。")]),e._v(" "),v("p",[e._v("并行是微观概念，假设 CPU 中存在两个核心，那么我就可以同时完成任务 A、B。同时完成多个任务的情况就可以称为并行。")]),e._v(" "),v("h2",{attrs:{id:"_2-回调函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-回调函数"}},[e._v("#")]),e._v(" 2.回调函数")]),e._v(" "),v("blockquote",[v("p",[e._v("什么是回调函数？回调函数有什么缺点？如何解决回调地狱问题？")])]),e._v(" "),v("p",[e._v("回调地狱的根本问题就是：")]),e._v(" "),v("p",[e._v("1.嵌套函数存在耦合性，一旦有所改动，就会牵一发而动全身")]),e._v(" "),v("p",[e._v("2.嵌套函数一多，就很难处理错误")]),e._v(" "),v("p",[e._v("当然回调函数还存在着别的几个缺点，比如不能用"),v("code",[e._v("try catch")]),e._v("捕获错误，不能直接"),v("code",[e._v("return")]),e._v("。")]),e._v(" "),v("h2",{attrs:{id:"_3-generator"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-generator"}},[e._v("#")]),e._v(" 3.Generator")]),e._v(" "),v("blockquote",[v("p",[e._v("你理解的 Generator 是什么?")])]),e._v(" "),v("p",[v("code",[e._v("Generator")]),e._v("最大的特点就是可以控制函数的执行。")]),e._v(" "),v("h2",{attrs:{id:"_4-promise"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-promise"}},[e._v("#")]),e._v(" 4.Promise")]),e._v(" "),v("blockquote",[v("p",[e._v("Promise 的特点是什么，分别有什么缺点?什么是 Promise 链？Promise 构造函数执行和 then 函数执行有什么区别?")])]),e._v(" "),v("p",[e._v("promise 有三种状态：pending、resolved、rejected 这个承诺一旦从等待状态变为其他状态就永远不能更改状态了，也就是说一旦状态变为 resolved 后,就不能再改变")]),e._v(" "),v("p",[e._v("当我们在构造 promise 的时候，构造函数内部的代码是立即执行的")]),e._v(" "),v("p",[e._v("Promsie 实现了链式调用，很好地解决了回调地狱的问题，但是也有一些缺点比如无法取消 Promise，错误需要通过回调函数捕获。")]),e._v(" "),v("h2",{attrs:{id:"_5-async-及-await"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-async-及-await"}},[e._v("#")]),e._v(" 5.async 及 await")]),e._v(" "),v("blockquote",[v("p",[e._v("async 及 await 的特点，它们的优点和缺点分别是什么？await 原理是什么？")])]),e._v(" "),v("p",[e._v("一个函数如果加上 async，那么这个函数就会返回一个 Promise")]),e._v(" "),v("p",[e._v("async 就是将函数返回值使用"),v("code",[e._v("Promise.resolve()")]),e._v("包裹了下，和"),v("code",[e._v("then")]),e._v("中处理返回值一样，并且"),v("code",[e._v("await")]),e._v("只能配套"),v("code",[e._v("async")]),e._v("用")]),e._v(" "),v("p",[v("code",[e._v("async")]),e._v("和"),v("code",[e._v("await")]),e._v("可以说是异步终极解决方案了，相比直接使用 "),v("code",[e._v("Promsie")]),e._v("来说，优势在于处理"),v("code",[e._v("then")]),e._v("的调用链，能够更清晰准确的写出代码，毕竟写一大堆"),v("code",[e._v("then")]),e._v("也很恶心，并且也能优雅的解决回调地狱问题。当然也存在一些缺点。因为"),v("code",[e._v("await")]),e._v("将异步代码改造成了同步代码，如果多个异步代码没有依赖性却使用了"),v("code",[e._v("await")]),e._v("会导致性能上的降低。")]),e._v(" "),v("p",[e._v("其实"),v("code",[e._v("await")]),e._v("就是"),v("code",[e._v("generator")]),e._v("加上"),v("code",[e._v("Promise")]),e._v("的语法糖，且内部实现了自动执行"),v("code",[e._v("generator")]),e._v("。如果你熟系 co 的话，其实自己可以实现这样的语法糖。")]),e._v(" "),v("h2",{attrs:{id:"_6-常用定时器函数"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-常用定时器函数"}},[e._v("#")]),e._v(" 6.常用定时器函数")]),e._v(" "),v("blockquote",[v("p",[e._v("setTimeout、setInterval、requestAnimationFrame 各有什么特点？")])]),e._v(" "),v("p",[e._v("异步编程当然少不了定时器了，常见的定时器函数有"),v("code",[e._v("setTimeout")]),e._v("、"),v("code",[e._v("setInterval")]),e._v("、"),v("code",[e._v("requsetAnimationFrame")]),e._v("。")]),e._v(" "),v("p",[e._v("因为 JS 是单线程执行的，如果前面的代码影响了性能，就会导致"),v("code",[e._v("setTimeout")]),e._v("不会按期执行。当然了，我们可以通过代码去修正"),v("code",[e._v("setTimeout")]),e._v("，从而使定时器相对准确。")]),e._v(" "),v("p",[e._v("接下来我们来看"),v("code",[e._v("setInterval")]),e._v("，其实这个函数作用和"),v("code",[e._v("setTimeout")]),e._v("基本一致，只是该函数是没隔一段时间执行一次回调函数。")]),e._v(" "),v("p",[e._v("通常来说不建议使用"),v("code",[e._v("setInterval")]),e._v("。第一，他和"),v("code",[e._v("setTimeout")]),e._v("一样，不能保证在预期的时间执行任务。第二，它存在执行累积的问题")]),e._v(" "),v("p",[e._v("如果你有循环定时器的需求，其实完全可以通过"),v("code",[e._v("requestAnimationFrame")]),e._v("来实现")]),e._v(" "),v("p",[e._v("首先"),v("code",[e._v("requsetAnimationFrame")]),e._v("自带函数节流的功能，基本可以保证在 16.6ms 内只执行一次（不掉帧的情况下），并且该函数的延时效果是精确的，没有其他定时器时间不准的问题，当然你也可以通过该函数来实现"),v("code",[e._v("setTimeout")])])])}],!1,null,null,null);_.default=a.exports}}]);