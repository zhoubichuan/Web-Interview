(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{192:function(t,s,a){"use strict";a.r(s);var e=a(0),_=Object(e.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"安全防范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全防范"}},[t._v("#")]),t._v(" 安全防范")]),t._v(" "),a("h2",{attrs:{id:"_1-xss"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-xss"}},[t._v("#")]),t._v(" 1.XSS")]),t._v(" "),a("blockquote",[a("p",[t._v("什么是 XSS 攻击？如何防范 XSS 攻击？什么是 CSP?")])]),t._v(" "),a("p",[t._v("XSS 简单点说，就是攻击者将可执行代码注入到网页中")]),t._v(" "),a("p",[t._v("XSS 可以分为多种类型，但是总体上我认为分为两类：持久性和非持久型")]),t._v(" "),a("p",[t._v("持久型也就是攻击的代码被服务端写入进数据库中，这种攻击危害性很大，因为如果网站访问量很大的话，就会导致大量正常访问页面的用户都受到攻击。")]),t._v(" "),a("p",[t._v("这种情况如果前后端没有做好防御的话，这段评论就会被储存到数据库中，这样每个打开该页面的用户都会被攻击到。")]),t._v(" "),a("p",[t._v("如果页面需要 URL 中获取某些参数作为内容的话，不经过过滤就会导致攻击代码被执行。")]),t._v(" "),a("p",[t._v("但是对于这种攻击方式来说，如果用户使用 Chrome 这类浏览器的话，浏览器就能自动帮助用户防御攻击。但是我们不能因此就不防御此类攻击了，因为我不能确保用户都使用了该类浏览器。")]),t._v(" "),a("p",[t._v("对于 XSS 攻击来说，通常有两种方式可以用来防御。\n"),a("strong",[t._v("转义字符")]),t._v("\n首先，对于用户的输入应该是永远不信任的。最普通的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义。")]),t._v(" "),a("p",[t._v("但是对于显示富文本来说，显然不能通过上面的办法来转义所有的字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的办法，当然也可以通过黑名单过滤，但是考虑到需要过滤的标签和标签属性实在太多，更加推荐白名单的方式。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" xss "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"xss"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" html "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xss")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('\'<h1 id="title">XSS Demo</h1><script>alert("xss");<\/script>\'')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// -> <h1>XSS Demo</h1>&lt;script&gt;alert("xss");&lt;/script&gt;')]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("以上示例使用了"),a("code",[t._v("js-xss")]),t._v("来实现，可以看到输出中保留了"),a("code",[t._v("h1")]),t._v("标签且过滤了"),a("code",[t._v("script")]),t._v("标签。")]),t._v(" "),a("p",[a("strong",[t._v("CSP")]),t._v("\nCSP 本质就是建立白名单，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击。")]),t._v(" "),a("p",[t._v("通常可以通过两种方式来开启 CSP:")]),t._v(" "),a("p",[t._v("1.设置 HTTP Header 中的"),a("code",[t._v("Content-Security-Policy")])]),t._v(" "),a("p",[t._v("2.设置"),a("code",[t._v("meta")]),t._v("标签的方式"),a("code",[t._v('<meta http-equiv="Content-Securiry-Policy">')])]),t._v(" "),a("p",[t._v("这里以设置 HTTP Header 来举例")]),t._v(" "),a("ul",[a("li",[t._v("只允许加载本站资源")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Content"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Security"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Policy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'self'")]),t._v("\n")])])]),a("ul",[a("li",[t._v("只允许加载 HTTPS 协议图片")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Content-Security-Policy:img-src https://*\n")])])]),a("ul",[a("li",[t._v("允许加载任何来源框架")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Content"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Security"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Policy"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("child"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("src "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'none'")]),t._v("\n")])])]),a("p",[t._v("对于这种方式来说，只要开发者配置了正确的规则，那么即使网站存在漏洞，攻击者也不能执行它的攻击代码，并且 CSP 的兼容性也不错。")]),t._v(" "),a("h2",{attrs:{id:"_2-csrf"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-csrf"}},[t._v("#")]),t._v(" 2.CSRF")]),t._v(" "),a("blockquote",[a("p",[t._v("什么是 CSRF 攻击?如何防范 CSRF 攻击?")])]),t._v(" "),a("p",[t._v("CSRF 中文名为跨站请求伪造。原理即使攻击者构造出一个后端请求地址，诱导用户点击或者通过某些途径自动发起请求。如果用户是在登录状态下的话，后端就以为是用户在操作，从而进行相应的逻辑。")]),t._v(" "),a("p",[t._v("举个例子，假如网站中有一个通过"),a("code",[t._v("GET")]),t._v("请求提交用户评论的接口，那么攻击者就可以在钓鱼网站中加入一个图片，图片的地址就是评论接口。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("img src"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"http://www.domai.com/xxx?comment='attack'\"")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("那么你也是否会想到使用"),a("code",[t._v("POST")]),t._v("方式提交请求是不是就没有这个问题了呢？其实并不是，使用这种方式也不是百分百安全，攻击者同样可以诱导用户进入某个页面，在页面个中通过表单提交"),a("code",[t._v("POST")]),t._v("请求。\n"),a("strong",[t._v("如何防御")])]),t._v(" "),a("p",[t._v("防范 CSRF 攻击可以遵循以下几种规则：")]),t._v(" "),a("p",[t._v("1、Get 请求不对数据进行修改")]),t._v(" "),a("p",[t._v("2、不让第三方网站访问到用户 Cookie")]),t._v(" "),a("p",[t._v("3、阻止第三方网站请求接口")]),t._v(" "),a("p",[t._v("4、请求时附带验证信息，比如验码或者 Token")]),t._v(" "),a("p",[a("strong",[t._v("SameSite")])]),t._v(" "),a("p",[t._v("可以对 Cookie 设置"),a("code",[t._v("SameSite")]),t._v("属性。该属性表示 Cookie 不随着跨域请求发送，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。")]),t._v(" "),a("p",[a("strong",[t._v("验证 Referer")])]),t._v(" "),a("p",[t._v("对于需要防范 CSRF 的请求，我们可以通过验证 Referer 来判断该请求是否为第三方网站发起的")]),t._v(" "),a("p",[a("strong",[t._v("Token")])]),t._v(" "),a("p",[t._v("服务器下发一个随机 Token,每次发起请求时将 Token 携带上，服务器验证 Token 是否有效。")]),t._v(" "),a("h2",{attrs:{id:"_3-点击劫持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-点击劫持"}},[t._v("#")]),t._v(" 3.点击劫持")]),t._v(" "),a("blockquote",[a("p",[t._v("什么是点击劫持？如何防范点击劫持？")])]),t._v(" "),a("p",[t._v("点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过"),a("code",[t._v("iframe")]),t._v("嵌套的方式嵌入自己的网页中，并将"),a("code",[t._v("iframe")]),t._v("设置为透明，在页面中透出一个按钮诱导用户点击。")]),t._v(" "),a("p",[t._v("对于这种攻击方式，推荐防御的方法有两种。\n"),a("strong",[t._v("X-FRAME-OPTIONS")])]),t._v(" "),a("p",[a("code",[t._v("X-FRAME-OPTIONS")]),t._v("是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头就是为了防御用"),a("code",[t._v("iframe")]),t._v("嵌套的点击劫持攻击。")]),t._v(" "),a("p",[t._v("该响应头有三个值可选，分别是")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("DENY")]),t._v(",表示页面不允许通过"),a("code",[t._v("iframe")]),t._v("的方式展示")]),t._v(" "),a("li",[a("code",[t._v("SAMEOPIGIN")]),t._v(",表示页面可以在相同域名下通过"),a("code",[t._v("iframe")]),t._v("的方式展示")]),t._v(" "),a("li",[a("code",[t._v("ALLOW-FROM")]),t._v(",表示页面可以在指定来源的"),a("code",[t._v("iframe")]),t._v("中展示")])]),t._v(" "),a("h2",{attrs:{id:"_4-中间人攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-中间人攻击"}},[t._v("#")]),t._v(" 4.中间人攻击")]),t._v(" "),a("blockquote",[a("p",[t._v("什么是中间人攻击？如何防范中间人攻击？")])]),t._v(" "),a("p",[t._v("中间人攻击是攻击方同时与服务端和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。攻击者不仅能获得双方的通信信息，还能修改通信信息。")]),t._v(" "),a("p",[t._v("通常来说不建议使用公共 Wi-Fi,因为很可能就会发生中间人攻击的情况。如果你在通信的过程中涉及到了某些敏感信息，就完全暴露给攻击方了。")]),t._v(" "),a("p",[t._v("当然防御中间人攻击其实并不难，只需要增加一个安全通道来传输信息。HTTPS 就可以用来防御中间人攻击，但是并不是说使用了 HTTPS 就可以高枕无忧了，因为如果你没有完全关闭 HTTP 访问的话，攻击方可以通过某些方式将 HTTPS 降级为 HTTP 从而实现中间人攻击。")])])}],!1,null,null,null);s.default=_.exports}}]);