(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{194:function(_,v,e){"use strict";e.r(v);var t=e(0),a=Object(t.a)({},(function(){var _=this.$createElement;this._self._c;return this._m(0)}),[function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"监控"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#监控"}},[_._v("#")]),_._v(" 监控")]),_._v(" "),e("p",[_._v("前端监控一般分为三种，分别为页面埋点、性能监控及异常监控。")]),_._v(" "),e("h2",{attrs:{id:"_1-页面埋点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-页面埋点"}},[_._v("#")]),_._v(" 1.页面埋点")]),_._v(" "),e("p",[_._v("页面埋点应该是大家最常写的监控了，一般起码会监控以下一个数据：")]),_._v(" "),e("ul",[e("li",[_._v("PV/UV")]),_._v(" "),e("li",[_._v("停留时间")]),_._v(" "),e("li",[_._v("流量来源")]),_._v(" "),e("li",[_._v("用户交互")])]),_._v(" "),e("p",[_._v("对于这几类统计，一般的实现思路大致可以分为两种，分别为手写埋点和无埋点的方式")]),_._v(" "),e("p",[_._v("相信第一种方式也是大家最常用的方式，可以自主选择需要监控的数据然后在相应的地方写入代码。这种方式的灵活性很大，但是唯一的缺点就是工作量较大，每个需要监控的地方都得插入代码。")]),_._v(" "),e("p",[_._v("另一种无埋点的方式基本不需要开发者手写埋点了，而是统计所有的事件并且定时上报。这种方式虽然没有前一种方式繁琐了，但是因为统计的是所有事件，所以还需要后期过滤出需要的数据。")]),_._v(" "),e("h2",{attrs:{id:"_2-性能监控"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-性能监控"}},[_._v("#")]),_._v(" 2.性能监控")]),_._v(" "),e("p",[_._v("性能监控可以很好的帮助开发者了解在各种真实环境下，页面的性能情况是如何的。")]),_._v(" "),e("p",[_._v("对于性能监控来说，我们可以直接使用浏览器自带的 Performanace API 来实现这个功能")]),_._v(" "),e("p",[_._v("对于性能监控来说，其实我们只需要调用"),e("code",[_._v("performance.getEntriesByType('navigation')")]),_._v("这行代码就行了")]),_._v(" "),e("p",[_._v("我们可以发现这行代码返回了一个数组，内部包含了相当多的信息，从数据开始在网络中传世到页面加载完成都提供了相应的数据。")]),_._v(" "),e("h2",{attrs:{id:"_3-异常监控"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-异常监控"}},[_._v("#")]),_._v(" 3.异常监控")]),_._v(" "),e("p",[_._v("对于异常监控来说，以下两种监控是必不可少的，分别是代码保存以及接口异常上报。")]),_._v(" "),e("p",[_._v("对于代码运行错误，通常的办法是使用"),e("code",[_._v("window.onerror")]),_._v("拦截报错。该方法拦截到大部分的详细报错信息，但是也有例外。")]),_._v(" "),e("ul",[e("li",[_._v("对于跨域的代码运行错误会显示"),e("code",[_._v("Script errror")]),_._v("对于这种情况我们需要给"),e("code",[_._v("script")]),_._v("标签添加"),e("code",[_._v("crossorigin")]),_._v("属性")]),_._v(" "),e("li",[_._v("对于某些浏览器可能不会显示调用栈信息，这种情况可以通过"),e("code",[_._v("arguments.callee.caller")]),_._v("来做栈递归")])]),_._v(" "),e("p",[_._v("对于异步代码来说，可以使用"),e("code",[_._v("catch")]),_._v("的方式捕获错误。比如"),e("code",[_._v("Promise")]),_._v("可以直接使用"),e("code",[_._v("catch")]),_._v("函数，"),e("code",[_._v("async await")]),_._v("可以是用"),e("code",[_._v("try catch")])]),_._v(" "),e("p",[_._v("但是要注意线上运行的代码都是压缩过的，需要在打包时生成 sourceMap 文件便于 debug。")]),_._v(" "),e("p",[_._v("对于捕获的错误需要上传个服务器，通常可以通过"),e("code",[_._v("img")]),_._v("标签的"),e("code",[_._v("src")]),_._v("发起一个请求。")]),_._v(" "),e("p",[_._v("另外接口异常就相对来说简单了，可以列举出出错的状态码。一旦出现此类的状态码就可以立即上报出错。接口异常上报可以让开发人员迅速知道哪些接口出现了大面积的报错，以便迅速修复问题。")])])}],!1,null,null,null);v.default=a.exports}}]);